

This RFC patch set introduces famfs - a scale-out fs-dax file system for shared
fabric-attached memory (FAM). The CXL 3.1 standard introduces scale-out
sharable memory, including support limited support for cache coherency
and write protection. Shared memory can either be on a true fabric (switched)
or via multi-ported memory devices (multi-headed devices in CXL parlance).

Famfs supports creating a file system on a
sharable dax memory device, such that multiple hosts can mount the file system
and access the files - subject to permissions. By handling metadata
in user space, we can support multiple hosts mounting the smae file system
from the same memory image. Rather than preventing clients from having stale
metadata, we make that situation architecturally tolerable by disallowing
certain types of mutations to a mounted file system. But that functionality
lives in user space.

A working famfs configuration consists of this kernel module and a set of
user space library and tools. The user space components can be fount at
https://github.com/cxl-micron-reskit/famfs.

Without the user space tools, the famfs kernel file system is just a
non-functional clone of ramfs. The user space tools implement a superblock
and log. Playing the log instantiates the files and directories that were
recorded in the log.

When a file is instantiated during a logplay, it is created as an empty
file in the famfs kernel file system, and then an ioctl is called to provide
the extent list of backing memory for the file. After that call is made,
the file is an S_DAX file that maps to the appropriate range(s) of the
DAX device.

Iomap support for /dev/dax

There are existing fs-dax file systems, but they are 1) not sharable and
2) only work with /dev/pmem devices (which are dax block devices). Volatile
memory on CXL is exposed as a character dax device. As a result, this patch
set needs to enable some necessary infrastructure for character /dev/dax
devices.

The first 4 patches of this series enable the dax_iomap_rw() and
dax_iomap_fault() interfaces in the character dax driver. This is
sufficient to support a famfs file system on a /dev/dax device.
